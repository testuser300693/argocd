  apiVersion: v1
  kind: ConfigMap
  metadata:
    name:  argocd-notifications-cm
  data:
    subscriptions: |
      - recipients:
        - slack:argocdreleasenotes
        triggers:
        - on-sync-succeeded
      - recipients:
        - slack:argocdreleasenotes
        triggers:
        - on-deployed
      - recipients:
        - slack:argocdreleasefailures
        triggers:
        - on-health-degraded
      - recipients:
        - slack:argocdreleasefailures
        triggers:
        - on-sync-failed
    template.app-sync-status: |
      message: |
        Application {{.app.metadata.name}} has been successfully synced at {{.app.status.operationState.finishedAt}}.
        Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .
        Author: {{(call .repo.GetCommitMetadata .app.status.sync.revision).Author}}"
    template.app-deployed: |
      message: |
        Application {{.app.metadata.name}} is now running new version of deplyments manifests.
        Author: {{(call .repo.GetCommitMetadata .app.status.sync.revision).Author}}"
    template.app-health-degraded: |
      message: |
        Application {{.app.metadata.name}} has degraded.
        Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}.
        Author: {{(call .repo.GetCommitMetadata .app.status.sync.revision).Author}}"
    template.app-sync-failed: |
      message: |
        The sync operation of application {{.app.metadata.name}} has failed at {{.app.status.operationState.finishedAt}} with the following error: {{.app.status.operationState.message}}
        Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .
        Author: {{(call .repo.GetCommitMetadata .app.status.sync.revision).Author}}"
    trigger.on-sync-succeeded: |
      - when: app.status.sync.status == "Succeeded"
        send: [app-sync-status]
    trigger.on-deployed: |
      - when: app.status.operationState.phase in ['Succeeded'] and app.status.health.status == 'Healthy'
        oncePer: app.status.operationState.syncResult.revision
        send: [app-deployed]
    trigger.on-health-degraded: |
      - when: app.status.health.status == 'Degraded'
        send: [app-health-degraded]
    trigger.on-sync-failed: |
      - when: app.status.operationState.phase in ['Error', 'Failed']
        send: [app-sync-failed]